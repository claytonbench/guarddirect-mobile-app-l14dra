#
# Security Patrol Application - Kubernetes Secrets
#
# This manifest defines the secrets used by the Security Patrol Application.
# IMPORTANT: This file contains placeholder values that should be replaced
# during deployment. Never commit actual secret values to version control.
#
# Secrets defined:
# - security-patrol-secrets: Main application secrets
# - security-patrol-api-tls: TLS certificate and private key
# - security-patrol-registry-credentials: Docker registry credentials
#
# Security considerations:
# - All secrets are base64-encoded and should be encrypted at rest
# - Follow a regular rotation schedule as defined in annotations
# - Limit access to these secrets using RBAC
# - Consider using a dedicated secret management solution for production
#

---
# Main application secrets for the Security Patrol API
# Contains database credentials, JWT token secret, API keys, and monitoring configuration
apiVersion: v1
kind: Secret
metadata:
  name: security-patrol-secrets
  namespace: security-patrol
  labels:
    app: security-patrol
    component: api
  annotations:
    description: "Core secrets for the Security Patrol Application"
    rotation-schedule: "Quarterly"
type: Opaque
data:
  # Azure SQL Database connection string - high sensitivity
  db-connection-string: ${BASE64_DB_CONNECTION_STRING}
  
  # JWT token signing and validation key - high sensitivity, rotate quarterly
  jwt-secret: ${BASE64_JWT_SECRET}
  
  # SMS service API key for verification codes - high sensitivity
  sms-api-key: ${BASE64_SMS_API_KEY}
  
  # General API authentication key - high sensitivity, rotate quarterly
  api-key: ${BASE64_API_KEY}
  
  # Application Insights connection string for monitoring - medium sensitivity
  appinsights-connection-string: ${BASE64_APPINSIGHTS_CONNECTION_STRING}
  
  # SMTP password for AlertManager email notifications - high sensitivity
  smtp-password: ${BASE64_SMTP_PASSWORD}

---
# TLS certificate and private key for HTTPS communication
# Used by Ingress for TLS termination
apiVersion: v1
kind: Secret
metadata:
  name: security-patrol-api-tls
  namespace: security-patrol
  labels:
    app: security-patrol
    component: api
  annotations:
    description: "TLS certificate for api.securitypatrol.example.com"
    rotation-schedule: "90 days via cert-manager"
type: kubernetes.io/tls
data:
  # Public TLS certificate - medium sensitivity
  tls.crt: ${BASE64_TLS_CERTIFICATE}
  
  # Private key for TLS certificate - high sensitivity
  tls.key: ${BASE64_TLS_KEY}

---
# Docker registry credentials for pulling container images
# Used by deployments to authenticate with private container registry
apiVersion: v1
kind: Secret
metadata:
  name: security-patrol-registry-credentials
  namespace: security-patrol
  labels:
    app: security-patrol
    component: api
  annotations:
    description: "Container registry authentication"
    rotation-schedule: "When registry credentials change"
type: kubernetes.io/dockerconfigjson
data:
  # Docker registry authentication configuration - high sensitivity
  .dockerconfigjson: ${BASE64_DOCKER_CONFIG}